package AutoInfoSys;

import java.util.List;
import java.util.ArrayList;

public abstract class AbstractBinaryTree<E> extends AbstractTree<E> implements BinaryTree<E> {
    public Position<E> sibling(Position<E> p) {
        Position<E> parent = parent(p);                 // get Position of p's parent
        if (parent == null) return null;                // If parent of p is null the p must be root in which case it has no siblings
        if (p == left(parent)) return right(parent);    // If p is left child, return its right sibling
        else return left(parent);                       // If p is right child, return its left sibling
    }

    public int numChildren(Position<E> p) {
        int count = 0;
        if (left(p) != null) count++;                   // if p has a left child, increment count
        if (right(p) != null) count++;                  // if p has a right child, increment count
        return count;
    }

    /**
     * Accessor method returns iterable collection of p's children
     * @param p The node for which an iterable collection of its children is to be returned.
     * @return iterable collection of every <code>Position</code> of p's children.
     */
    public Iterable<Position<E>> children(Position<E> p) {
        List<Position<E>> snapshot = new ArrayList<>(2);        // an empty ArrayList serves as the snapshot
        if (left(p) != null) snapshot.add(left(p));                        // add children to the snapshot
        if (right(p) != null) snapshot.add(right(p));
        return snapshot;
    }
}
package AutoInfoSys;

/**
 * An abstract base class implementing the methods and providing 
 * some functionality for the general tree interface.
 * This class will be used the make more concrete Tree structures.
 */
public abstract class AbstractTree<E> implements Tree<E> {
    /**
     * <code>Position</code> p is an internal node if it
     * has more than zero (at least one) children.
     */
    public boolean isInternal(Position<E> p) { return numChildren(p) > 0; }
    /**
     * <code>Position</code> p is an external node if it has zero children.
     */
    public boolean isExternal(Position<E> p) { return numChildren(p) == 0; }
    /**
     * <code>Position</code> p is the root of the tree if it is equal to
     * return value of <code>root()</code> which is the root of the tree.
     */
    public boolean isRoot(Position<E> p) { return p == root(); }
    public boolean isEmpty() { return size() == 0; }
}
package AutoInfoSys;

import java.util.Iterator;

public class BalanceableBinaryTree<K,V> extends LinkedBinaryTree<Entry<K,V>> {
    //----------------------- BST Node class -------------------------//
    protected static class BSTNode<E> extends Node<E> {
        int aux;
        BSTNode(E e, Node<E> p, Node<E> lC, Node<E> rC) {
            super(e, p, lC, rC);
            aux = 0;
        }
        public int getAux() { return aux; }
        public void setAux(int a) { aux = a; }
    }//----------------------- End of BST Node class -------------------------//

    // positional-based methods related to aux fields
    public int getAux(Position<Entry<K,V>> p) { return ((BSTNode<Entry<K,V>>) p).getAux(); }

    public void setAux(Position<Entry<K,V>> p, int v) { ((BSTNode<Entry<K,V>>) p).setAux(v); }

    // Override factory method to produce BST Node and not a regular Node
    protected Node<Entry<K,V>> createNode(Entry<K,V> e, Node<Entry<K,V>> parent, Node<Entry<K,V>> left, Node<Entry<K,V>> right) { return new BSTNode<>(e, parent, left, right); }

    // Re-links parent node with oriented child node
    private void relink(Node<Entry<K,V>> parent, Node<Entry<K,V>> child, boolean makeLeftChild) {
        child.setParent(parent);
        if (makeLeftChild) parent.setLeft(child);
        else parent.setRight(child);
    }

    /**
     * @Description: Rotates Position p (child) above its parent.
     * @param p Position (child) to be rotated above parent.
     */
    public void rotate(Position<Entry<K,V>> p) {
        Node<Entry<K,V>> x = validate(p);                       // return p (child) as a validated Node
        Node<Entry<K,V>> y = x.getParent();                     // parent of p (child)
        Node<Entry<K,V>> z = y.getParent();                     // grandparent of p (child)
        if (z == null) {                                        // if p does'nt have grandparent then it becomes root/parent
            root = x;
            x.setParent(null);
        } else relink(z, x, y == z.getLeft());      // make x direct child of y
        // rotate x and y and transfer of middle subtree
        if (x == y.getLeft()) {
            relink(y, x.getRight(), true);          // make x's right child y's left
            relink(x, y, false);                    // make y x's right child
        } else {
            relink(y, x.getLeft(), false);          // make x's left child y's right child
            relink(x, y, true);                     // make y left child of x
        }
    }

    // Performs tri-node restructuring of Position x with its parent/grandparent
    public Position<Entry<K,V>> restructure(Position<Entry<K,V>> x) {
        Position<Entry<K,V>> y = parent(x);
        Position<Entry<K,V>> z = parent(y);
        if ((x == right(y)) == (y == right(x))) {               // matching alignments
            rotate(y);                                          // rotate y once
            return y;                                           // y is root of new subtree
        } else {
            rotate(x);
            rotate(x);                                          // rotate x twice
            return x;                                           // x is root of new subtree
        }
    }

    @Override
    public Iterator<Entry<K, V>> iterator() {
        return null;
    }

    @Override
    public Iterable<Position<Entry<K, V>>> positions() {
        return null;
    }
}
package AutoInfoSys;

/**
 * An general Binary Tree interface, in which each node has at most two children.
 * This is a specialization of the Tree interface.
 *
 * This interface supports three additional accessor methods.
 */
public interface BinaryTree<E> extends Tree<E> {
    /**
     * Accessor method that returns <code>Position</code> of p's left child or null.
     * @param p  The internal node whose child is to be returned.
     * @return <code>Position</code> of p's left child or null if none exists.
     * @throws IllegalArgumentException if <code>Position</code> p is invalid.
     */
    Position<E> left(Position<E> p) throws IllegalArgumentException;
    /**
     * Returns <code>Position</code> of p's right child or null.
     * @param p  The internal node whose child is to be returned.
     * @return <code>Position</code> of p's left right or null if none exists.
     * @throws IllegalArgumentException if <code>Position</code> p is invalid.
     */
    Position<E> right(Position<E> p) throws IllegalArgumentException;
    /**
     * Returns <code>Position</code> of p's sibling or null.
     * @param p  The node whose sibling is to be returned.
     * @return <code>Position</code> of p's sibling or null if none exists.
     * @throws IllegalArgumentException if <code>Position</code> p is invalid.
     */
    Position<E> sibling(Position<E> p) throws IllegalArgumentException;
}
package AutoInfoSys;


public interface Entry<K, V> {
    K getKey();
    V getValue();
}
package AutoInfoSys;

import java.util.Iterator;

/**
 * Concrete implementation of a binary tree using  a node-based, linked structure.
 */
public class LinkedBinaryTree<E> extends AbstractBinaryTree<E> {

    //-------------------- Node class ---------------------//
    protected static class Node<E> implements Position<E> {
        private E element;
        private Node<E> parent;
        private Node<E> left;
        private Node<E> right;

        public Node (E e, Node<E> above, Node<E> leftChild, Node<E> rightChild) {
            element = e;
            parent = above;
            left = leftChild;
            right = rightChild;
        }
        //---------------- GETTER ----------------------//
        public E getElement() { return element; }
        public Node<E> getParent() { return parent; }
        public Node<E> getLeft() { return left; }
        public Node<E> getRight() { return right; }
        //----------------- SETTER -----------------------//
        public void setElement(E e) { element = e; }
        public void setParent(Node<E> node) { parent = node; }
        public void setLeft(Node<E> node) { left = node; }
        public void setRight(Node<E> node) { right = node; }
    }//-------------------- End of Node ------------------//

    /**
     * Factory method to create new node with element e and return node instance
     * @param e element at this node.
     * @param p parent of this node.
     * @param l left child.
     * @param r right child.
     * @return new <code>Node</code> instance.
     */
    protected Node<E> createNode(E e, Node<E> p, Node<E> l, Node<E> r) {
        return new Node<E>(e, p, l, r);
    }

    // LinkedBinaryTree attributes
    protected Node<E> root;                 // root of tree
    protected int size;                     // number of nodes in the tree

    //-------------------- CONSTRUCTOR -------------------//
    public LinkedBinaryTree() {            
        root = null;                        // initialize to null
        size = 0;                           // initialize to zero
    }

    /**
     * Protected utility method. Validates or ensures that given <code>Position</code> is a valid node.
     * @param p <code>Position</code> to be validated.
     * @return <code>Node</code> instance of validated <code>Position</code>.
     * @throws IllegalArgumentException if <code>Position</code> is invalid.
     */
    protected Node<E> validate(Position<E> p) throws IllegalArgumentException {
        if (!(p instanceof Node)) throw new IllegalArgumentException("Not a valid position type");
        Node<E> node = (Node<E>) p;                     // safe cast
        if (node.getParent() == node) throw new IllegalArgumentException("p is no longer in the tree");
        return node;
    }

    //---------------------------- accessor methods (not already implemented in AbstractBinaryTree)----------//

    public int size() {
        return size;
    }

    public Position<E> root() {
        return root;
    }

    public Position<E> parent(Position<E> p) throws IllegalArgumentException {
        Node<E> node = validate(p);
        return node.getParent();
    }

    public Position<E> left(Position<E> p) throws IllegalArgumentException {
        Node<E> node = validate(p);
        return node.getLeft();
    }

    public Position<E> right(Position<E> p) throws IllegalArgumentException {
        Node<E> node = validate(p);
        return node.getRight();
    }

    //-------------------- update methods supported by this class -----------------------//

    /**
     * Update method creates a root for an empty tree and stores e as the element.
     * <code>Position</code> of that root is returned.
     * @param e Element to be stored at new root.
     * @return <code>Position</code> of the new root.
     * @throws IllegalStateException if the tree is not empty.
     */
    public Position<E> addRoot(E e) throws IllegalStateException {
        if (!isEmpty()) throw new IllegalStateException("Tree is not empty");
        root = createNode(e, null, null, null);
        size = 1;
        return root;
    }

    /**
     * Update method creates a new node, a new left child of Position p storing element e.
     * @param p The <code>Position</code> for which a new left child is created.
     * @param e Element to be stored at new <code>Position</code>.
     * @return <code>Position</code> of new node.
     * @throws IllegalArgumentException if the p has a left child.
     */
    public Position<E> addLeft(Position<E> p, E e) throws IllegalArgumentException {
        Node<E> parent = validate(p);
        if (parent.getLeft() != null) throw new IllegalArgumentException("p already has a left child");
        Node<E> child = createNode(e, parent, null, null);
        parent.setLeft(child);
        size++;
        return child;
    }

    /**
     * Update method creates a new node, a new right child of Position p storing element e.
     * @param p The <code>Position</code> for which a new right child is created.
     * @param e Element to be stored at new <code>Position</code>.
     * @return <code>Position</code> of new node.
     * @throws IllegalArgumentException if the p has a right child.
     */
    public Position<E> addRight(Position<E> p, E e) throws IllegalArgumentException {
        Node<E> parent = validate(p);
        if (parent.getRight() != null) throw new IllegalArgumentException("p already has a right child");
        Node<E> child = createNode(e, parent, null, null);
        parent.setRight(child);
        size++;
        return child;
    }

    /**
     * Update method to replace element at p with new one.
     * @param p  <code>Position</code> whose element is to be changed.
     * @param e new element.
     * @return previously stored element.
     * @throws IllegalArgumentException if p is invalid.
     */
    public E set(Position<E> p, E e) throws IllegalArgumentException {
        Node<E> node = validate(p);
        E tmp = node.getElement();
        node.setElement(e);
        return tmp;
    }

    /**
     * Update method that attaches trees t1 and t2 as left and right subtrees to leaf <code>Position</code> p,
     * and resets t1 and t2 to empty trees.
     * @param p  leaf <code>Position</code> recieving subtrees t1 and t2.
     * @param t1 <code>LinkedBinaryTree</code> left subtree.
     * @param t2 <code>LinkedBinaryTree</code> right subtree.
     * @throws IllegalArgumentException if p is not a leaf.
     */
    public void attatch(Position<E> p, LinkedBinaryTree<E> t1, LinkedBinaryTree<E> t2) throws IllegalArgumentException {
        Node<E> node = validate(p);
        if (isInternal(p)) throw new IllegalArgumentException("p must be a leaf");
        size += t1.size() + t2.size();
        if (!t1.isEmpty()) {                            // attach t1 as left subtree of node
            t1.root.setParent(node);
            node.setLeft(t1.root);
            t1.root = null;
            t1.size = 0;
        }
        if (!t2.isEmpty()) {                            // attach t2 as right subtree of node
            t2.root.setParent(node);
            node.setRight(t2.root);
            t2.root = null;
            t2.size = 0;
        }
    }

    /**
     * Removes node at Position p and replaces it with its child, if any.
     * @param p <code>Position</code> that is being removed.
     * @return element that had been stored at <code>Position</code> p.
     * @throws IllegalArgumentException if p has two children.
     */
    public E remove(Position<E> p) throws IllegalArgumentException {
        Node<E> node = validate(p);
        if (numChildren(p) == 2) throw new IllegalArgumentException("p has two children");
        Node<E> child = (node.getLeft() != null ? node.getLeft() : node.getRight());
        if (child != null) child.setParent(node.getParent());
        if (node == root) root = child; 
        else {
            Node<E> parent = node.getParent();
            if (node == parent.getLeft()) parent.setLeft(child);
            else parent.setRight(child);
        }
        size--;
        E tmp = node.getElement();
        node.setElement(null);
        node.setLeft(null);
        node.setRight(null);
        node.setParent(node);
        return tmp;
    }

    @Override
    public Iterator<E> iterator() {
        return null;
    }

    @Override
    public Iterable<Position<E>> positions() {
        return null;
    }
}
package AutoInfoSys;

import java.util.Iterator;

public class Main {
    public static void main(String[] args) {
    }
}
package AutoInfoSys;

/**
 * An abstraction for node used in the Tree structure.
 * Every <code>Position</code> will represent a node and an element
 * will be stored at each <code>Position</code>.
 */
public interface Position<E> {
    /**
     * Accessor method that returns the element at this <code>Position</code>.
     * @return Element of type <code>E</code> stored at this <code>Position</code>.
     * @throws IllegalStateException
     */
    E getElement() throws IllegalStateException;
}
package AutoInfoSys;

public class test {
    public static void main(String[] args) {
        System.out.print(Math.PI);
    }
}
package AutoInfoSys;

import java.util.Iterator;

/**
 * A general interface for a Tree in which nodes can have any number of children.
 * This Tree ADT uses the concept of <code>Position</code> to abstractly represent a node.
 * At each <code>Position</code> and element is stored.
 */
public interface Tree<E> extends Iterable<E> {
    /**
     * Accessor method to return the Position of the root of the tree.
     * @return <code>Position</code> of the root of tree.
     */
    Position<E> root();
    /**
     * Accessor method to return the Position of the parent of child p.
     * @return <code>Position</code> of the parent p.
     * @throws IllegalArgumentException if <code>Position</code> p is invalid.
     */
    Position<E> parent(Position<E> p) throws IllegalArgumentException;
    /**
     * Accessor method to return an iterable collection of the children of Position p.
     * @return iterable collection of <code>Position</code>s of children of p.
     * @throws IllegalArgumentException if <code>Position</code> p is invalid.
     */
    Iterable<Position<E>> children(Position<E> p) throws IllegalArgumentException;
    /**
     * Accessor method to return the number of children of Position p.
     * @return <code>int</code> representing the number of children of p.
     * @throws IllegalArgumentException if <code>Position</code> p is invalid
     */
    int numChildren(Position<E> p) throws IllegalArgumentException;
    /**
     * Query method to to determine whether p is an internal node.
     * @return <code>true</code> if p has at least one child.
     * @throws IllegalArgumentException if <code>Position</code> p is invalid
     */
    boolean isInternal(Position<E> P) throws IllegalArgumentException;
    /**
     * Query method to to determine whether p is an external node.
     * @return <code>true</code> if p has no children.
     * @throws IllegalArgumentException if <code>Position</code> p is invalid
     */
    boolean isExternal(Position<E> P) throws IllegalArgumentException;
    /**
     * Query method to to determine whether p is the root of the tree.
     * @return <code>true</code> if p is the root (has no parent).
     * @throws IllegalArgumentException if <code>Position</code> p is invalid
     */
    boolean isRoot(Position<E> P) throws IllegalArgumentException;
    int size();
    boolean isEmpty();
    Iterator<E> iterator();
    Iterable<Position<E>> positions();
}
